# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "native-split" ]
  pull_request:
    branches: [ "native-split" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
    - name: Clone vcpkg
      run: git clone https://github.com/microsoft/vcpkg.git

    - name: Bootstrap vcpkg
      run: ./vcpkg/bootstrap-vcpkg.sh
      shell: bash
      if: runner.os != 'Windows'

    - name: Bootstrap vcpkg (Windows)
      run: .\vcpkg\bootstrap-vcpkg.bat
      shell: cmd
      if: runner.os == 'Windows'


    - name: Install necessary linux dependencies
      run: sudo apt-get install -y libltdl-dev autoconf automake libtool pkg-config unzip tar
      shell: bash
      if: runner.os == 'Linux'


    - name: Install extended Linux build dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          autoconf automake libtool pkg-config unzip tar \
          ninja-build python3 python3-pip python3-setuptools \
          libx11-dev libxext-dev libxrender-dev libxft-dev \
          libfreetype6-dev libfontconfig1-dev libglib2.0-dev \
          libpng-dev libz-dev libxi-dev libxtst-dev libxrandr-dev libudev-dev libxcursor-dev libgl1-mesa-dev libfreetype-dev libflac-dev libvorbis-dev libegl1-mesa-dev
                
                
                
          
    - name: Install dependencies via vcpkg
      shell: bash
      if: runner.os != 'Windows'
      run: |
        tail -n +2 vcpkg_rf.txt | xargs ./vcpkg/vcpkg install
    - name: Install dependencies via vcpkg (Windows)
      shell: pwsh
      if: runner.os == 'Windows'
      run: |
        Get-Content vcpkg_rf.txt | Select-Object -Skip 1 | ForEach-Object {
          .\vcpkg\vcpkg.exe install $_
        }
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}
    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

